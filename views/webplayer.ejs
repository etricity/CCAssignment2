<!doctype html>

<!--Main document for the Page. Other handlebar files are passed to this for dynamic html-->

<html lang="en">

<head>
  <meta charset="UTF-8">
  <title></title>
  <link rel="stylesheet" href="/stylesheets/style.css">
</head>
<div class="header">
  <div id='title'>
    <h1 id='greeting'></h1>
  </div>

</div>
<div class="container">
  <div class="sideBar">
    <nav>
      <div class='full-content'>
        <p> S.P.A.D.E</p>
      </div>

      <div id='table-div'>
        <table id='user-Table'>
          <tr>
            <td>Name </td>
            <td id='name'></td>
          </tr>
          <tr>
            <td>Country</td>
            <td id='country'></td>
          </tr>
          <tr>
            <td>Email</td>
            <td id='email'></td>
          </tr>
          <tr>
            <td>Product</td>
            <td id='product'></td>
          </tr>
        </table>
      </div>


      <div class='link-content'>
        <a id="webplayer">Dashboard</a>
      </div>
      <div class='link-content'>
        <a href="https://www.spotify.com/au/"> Go To Spotify</a>
      </div>
    </nav>

  </div>
  <div class="bodyContent">

    <body>

<!--Core Firebase JS SDK (must be listed first) -->
<script src="https://www.gstatic.com/firebasejs/7.14.1/firebase-app.js"></script>
<!--Adding Google analytics product -->
<script src="https://www.gstatic.com/firebasejs/7.14.1/firebase-analytics.js"></script>
<!--Adding Google Analytics config specify to this project -->
<script type="text/javascript" src="/js/analyticsConfig.js"></script>



      <div class="full-content">

        <h1>Spotify Web Player</h1>
        <p>To get started, open spotify on your local device and connect to the Spotify Web Player device.</p>
        <p id='status'> Waiting...</p>

      </div>

      <div id="web-buttons">
        <button id="play_pause" onclick="playPause()">Play/Pause</button>
        <button id="vol_up" onclick="volUp()">Increase Volume</button>
        <button id="vol_down" onclick="volDown()">Decrease Volume</button>
      </div>

    </body>

  </div>
</div>







<footer> S.P.A.D.E &COPY; </footer>


<script src="https://sdk.scdn.co/spotify-player.js"></script>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js">
//JESS ADDING CODE
</script>


<script>
  //Set initial volume
  var vol = 0.5;


  //Getting parameter codes from URL
  var params = getHashParams();
  var access_token = params.access_token,
    refresh_token = params.refresh_token;
  //Variable to acccess the player outside of the intialisation
  var p;


  window.onload = () => {

    $.ajax({
      url: 'https://api.spotify.com/v1/me',
      headers: {
        'Authorization': 'Bearer ' + access_token
      },
      success: function (response) {
        console.log(response);
        paintPage(response);
      }
    });

    var codes = window.location.hash.substr(1);
    var link = "/spotify/#" + codes;
    document.getElementById("webplayer").setAttribute("href", link);
  }

  function paintPage(response) {
    document.getElementById("greeting").innerText = response.display_name;
    document.getElementById("name").innerText = response.display_name;
    document.getElementById("email").innerText = response.email;
    document.getElementById("country").innerText = response.country;
    document.getElementById("product").innerText = response.product;

  }

// END JESS ADDING CODE


  //Setting up Spotify Web Player
  window.onSpotifyWebPlaybackSDKReady = () => {
    const token = access_token;
    const player = new Spotify.Player({
      name: 'S.P.A.D.E Web Player',
      volume: vol,
      getOAuthToken: cb => {
        cb(token);
      }
    });

    // Error handling
    player.addListener('initialization_error', ({
      message
    }) => {
      console.error(message);
      firebase.analytics().logEvent('initialization_error');
    });
    player.addListener('authentication_error', ({
      message
    }) => {
      console.error(message);
      firebase.analytics().logEvent('authentication_error');
    });
    player.addListener('account_error', ({
      message
    }) => {
      console.error(message);
      firebase.analytics().logEvent('account_error');
    });
    player.addListener('playback_error', ({
      message
    }) => {
      console.error(message);
      firebase.analytics().logEvent('playback_error');
    });

    // Playback status updates
    player.addListener('player_state_changed', state => {
      console.log('Player state changed. State: ', state)

      var message = 'playing';
      if(state.paused) {
        message = 'paused';
      }
      console.log(message);
      firebase.analytics().logEvent('webplayer_state_change', {state: message});
    });

    //
    player.addListener('ready', ({
      device_id
    }) => {
      console.log('Ready with Device ID: ', device_id);
      document.getElementById("status").innerText = 'Ready to play!'
      firebase.analytics().logEvent('player ready');

    });

    // Not Ready
    player.addListener('not_ready', ({
      device_id
    }) => {
      console.log('Offline with Device ID: ', device_id);
      document.getElementById("status").innerText = 'Device Offline!'
    });

    // Connect to the player!
    player.connect();
    p = player;
  };



  //Player Interaction Functions
  function playPause() {
    p.togglePlay().then(() => {
      console.log('Playback Toggled.');
    });
  }

  function volUp() {
    if (vol < 0.9) {
      vol += 0.1;
      p.setVolume(vol).then(() => {
        console.log('Volume Increased.');
      });
    }

  }

  function volDown() {
    if (vol > 0.1) {
      vol -= 0.1;
      p.setVolume(vol).then(() => {
        console.log('Volume Increased.');
      });
    }
  }


  //Utility Funtion
  function getHashParams() {
    var hashParams = {};
    var e, r = /([^&;=]+)=?([^&;]*)/g,
      q = window.location.hash.substring(1);
    while (e = r.exec(q)) {
      hashParams[e[1]] = decodeURIComponent(e[2]);
    }
    return hashParams;
  }
</script>
